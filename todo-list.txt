Contents:
-Next
-Considerable
-Notes on Testing
-Notes on Deadweight Loss

Next:
-remaining calculations/actions:
  -open, private economy: DONE
  -closed, public economy
    -price mechanism: (see the commit in which the todo list was detailed
    for the subsidy/taxation)
      -make the methods involved in the integration tests incorporate
      the price mechanisms
        -consumer surplus
        -producer surplus
      -implement now (to pass tests)
        -TBA
      -write integraion tests; edit EconomyModel
        -NOT DONE YET
          -price mechanism's type is changed
            -floor to ceiling
            -ceiling to floor
          -price mechanism's type is cancelled
          -reject invalid price mechanism (should this be unit test)
          -simple mixes? perhaps with at least one different kind of graph
        -DONE
          -price ceiling's magnitude updated
          -price floor's magnitude updated
      -implement after writing tests
        -the kind of the price mechanism is changed
          -set price mechanism amount to zero to avoid invalid amount
        -price mechanism is cancelled
          -if user turns off price mechanism (with the drop-down box),
          set it to 0
            -the price mechanism line should be erased
            -etc. (what else?)
      -edit TextView
    -make sure getTotalRevenue() is correct
      -always use quantity demanded? or should the minimum
      of QD and QS be used?
    -more integration tests
      -mixing price mechanism, tax, and/or subsidy
    -if user privatizes economy or opens economy; disable:
      -tax
      -subsidy
      -price mechanism
    -finishing touches
      -fix default controller values
  -open, public economy
    -tariff
      -recalculate:
        -welfare
      -calculate:
        [-deadweight loss (in an unexpected area)]
        -number of imports
        -tariff revenue
    -import quota
      -recalculate:
        -welfare
      -calculate:
        [-deadweight loss (in an unexpected area)]
        -number of imports (given)
        -tariff revenue N/A
-lingering concerns
  -move constants.js into utility, since controller uses it
  -domestic revenue shouldn't include tax revenue
  -does getTaxRevenue() still need the use of min?
    -in fact, I might be going about it wrong. It shouldn't necessarily
    be the minimum. (e.g. If supply is taxed, then government makes
    tax revenue off of how much is produced (i.e. qs), even if qd is lower.)
  -display tax revenue
-hi-liting controller
  -point value is highlighted (e.g. quantity demanded): perhaps show
  with a line on the canvas
  -area value is highlighted (e.g. tax revenue): color the area
-end (also see "Eventually" section)
  -where to say what industry it is?
  -make sure these are done
    -getNumberImports()
  -at some point, getTotalRevenue() MUST be
  changed, since total revenue = price x QD
  -make sure correct state is shown if disequilibrium
  -when (if ever) to implement the other part of getEconomicSurplus()?
    -erase alert in it at some point
  -readme
    -describe the use of MVC
    -describe omission of deadweight loss

Considerable:
-should there be a version of update() that only updates
specific fields, or would the time saved be too insignificant
compared to the time to make it work
  -ideas
    -"update filters"
-figure out if where I initially set up qd and qs is best
-have workarounds for calculations that reach the boundaries of the
supply or demand points
  -if this is still an issue, make a test to reveal it
-have some context wrapper custom type so I don't have to keep
putting the width and height in
-graph input read from a file
  -pick a way to get user's input to make the graph;
    -ideas regarding how to get the input:
      -have user paste them in certain format in text field
      -read from file, if possible with just JavaScript/jQuery
    -ideas regarding the input itself:
      -perhaps have it be specified there what is being graphed
      -get the maxes from the inputs
  -graph/input warnings/errors
    -if any calculation's integration goes past the final data point
    of the graph whose final data point's x-coordinate is lowest,
    then the graphs don't interact, and this should be said
    -report error if no semi-colon where expected one
  -read "what is graphed" from file
-the graph maxes seem a little deceptive, since they are not visible
due to the label offset
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-can probably afford to lower number of Riemann rectangles
-option to save applied inputs and apply them later
  -could use MongoDB and Node.js for this
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-limit each text field's size?
  -or would this require too much assuming about the data?
-when change is made, hi lite the fields that changed, and have
a button to clear the hi lites
-reapply settings when apply-able (e.g. if user opens economy, apply
the last used world price)

Notes on Testing:
-tests for:
(
-NOTE: should be done (twice?) for each of the following:
  -1) subsidy on demand <-- DONE
  -2) tax on demand <-- DONE
  -3) subsidy on supply <-- DONE
  -4) tax on supply <-- DONE
  -5) simple mixes; e.g.  <-- DONE
    -tax and subsidy on demand <-- DONE
    -tax and subsidy on supply <-- DONE
    -tax on supply; subsidy on demand <-- DONE
    -tax on demand; subsidy on supply <-- DONE
  -6) a few complicated mixes? (list some here) <-- DONE
    -set and toggle tax and subsidy <-- DONE
)
-domestic equilibrium
-quantity demanded/supplied? (or is this unnecessary, given
the assignments at the end of the setter methods)
-domestic total revenue
-consumer/producer surplus
-deadweight loss
-tax revenue

Notes on Deadweight Loss:
-EconomyModel.prototype.getDeadweightLoss()
  -make integration tests that calculate deadweight loss if both
  tax and subsidy; cases:
    -tax and subsidy cancel each other => no DWL
    -tax on supply overpowers subsidy on demand => which of the
    two resulting triangles in DWL?
    -etc.
  -have text-view use this method and display it as Price value
-what is deadweight loss if is tax, price mechanism, and tariff/quota?