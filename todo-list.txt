Contents:
-Next
-Eventually
-Considerable

Next:
-remaining calculations/actions:
  -open, private economy: DONE
  -closed, public economy
    -subsidy/tax on supply/demand:
      -figure out which cases have been tested, and see if they
      conform sufficiently to the notes below (put DONE in front
      if so)
      -tests for (all these values should be recalculated):
        (
        -NOTE: should be done (twice?) for each of the following:
          -1) subsidy on demand <-- DONE
          -2) tax on demand <-- DONE
          -3) subsidy on supply <-- DONE
          -4) tax on supply <-- DONE
          -5) simple mixes; e.g.  <-- DONE
            -tax and subsidy on demand <-- DONE
            -tax and subsidy on supply <-- DONE
            -tax on supply; subsidy on demand <-- DONE
            -tax on demand; subsidy on supply <-- DONE
          -6) a few complicated mixes? (list some here)
            -set and toggle tax and subsidy
        -NOTE: don't just use tests that have linear graphs
        -NOTE: look at cases in which rounding matters
        )
        -domestic equilibrium
        -quantity demanded/supplied? (or is this unnecessary, given
        the assignments at the end of the setter methods)
        -domestic total revenue
          -make sure the method does this right
            -always use quantity demanded? or should the minimum
            of QD and QS be used?
        -consumer/producer surplus
          -either:
            -tests that don't have the
              previously encountered problem
            -put off until address rounding issues
          -either way, make sure the above 6 cases have welfare tests
        -deadweight loss (should be zero if subsidy; only tax, price mechanism
        and tariff/quota cause deadweight loss)
        -tax revenue
      -PROBLEM: somewhere along the line, equilibrium quantity
      isn't properly updated
        -BIGGER PROBLEM: I'm no longer able to reproduce this problem.
      -SUGGESTION: think of some way to ensure the correct things get updated
        -don't be afraid to use another custom type or two
      -either fix getConsumerSurplus() and getProducerSurplus() now or later
        -there might be commented out tests to make note of
        -may need to add welfare tests if are none in integration tests
      -user's offset
        -is the user's given offset rounded?
          -should it be?
        -should all offsets be allowed?
      -finishing touches
        -fix default controller values
    -getDeadweightLoss()
      -have text-view use this method and display it as Price value
      -make unit tests involving it
      -uncomment out the integration tests involving it
      -implement it
    -price mechanism: (see the commit in which the todo list was detailed
    for the subsidy/taxation)
      -dashed line for where mechanism is
      -floor or ceiling:
        -recalculate (if equilibrium isn't reached):
          -mark that equilibrium isn't reached
          -total revenue
          -welfare
        -calculate
          -deadweight loss
    -if user privatizes economy or opens economy; disable:
      -tax
      -subsidy
      -price mechanism
  -open, public economy
    -tariff
      -recalculate:
        -welfare
      -calculate:
        -deadweight loss (in an unexpected area)
        -number of imports
        -tariff revenue
    -import quota
      -recalculate:
        -welfare
      -calculate:
        -deadweight loss (in an unexpected area)
        -number of imports (given)
        -tariff revenue N/A
-domestic revenue shouldn't include tax revenue
-does getTaxRevenue() still need the use of min?
  -in fact, I might be going about it wrong. It shouldn't necessarily
  be the minimum. (e.g. If supply is taxed, then government makes
  tax revenue off of how much is produced (i.e. qs), even if qd is lower.)
-hi-liting controller
  -point value is highlighted (e.g. quantity demanded): perhaps show
  with a line on the canvas
  -area value is highlighted (e.g. deadweight loss): color the area
-end (also see "Eventually" section)
  -see if any parts of the program (that could be done more than
  once) take too long
    -ideas for improving speed:
      -replace ng-show/hide with ng-if, and just reapply event handlers
      when appropriate
  -robustly test with variety of supply and demand data, including
  ones that make non-monotonic graphs
  -where to say what industry it is?
  -make sure these are done
    -getNumberImports()
    -getDeadweightLoss()
    -getTaxRevenue()
  -at some point, getTotalRevenue() MUST be
  changed, since total revenue = price x QD
  -figure out if where I initially set up qd and qs is best
  -make sure correct state is shown if disequilibrium
  -make sure everything is put in correct folder
    -should constants.js be in utility?
    -why are Quantity and Price in the utility folder?
    -adjust tests if needed
  -the maxes seem a little deceptive, since they are not visible
  due to the label offset
  -have some context wrapper custom type so I don't have to keep
  putting the width and height in
  -should there be a version of update() that only updates
  specific fields, or would the time saved be too insignificant
  compared to the time to make it work
    -ideas
      -"update filters"
  -when (if ever) to implement the other part of getEconomicSurplus()?
    -erase alert in it at some point
  -remove Graph custom type and usage of it
  -describe the use of MVC in the readme

Eventually:
-graph input
  -pick a way to get user's input to make the graph;
    -ideas regarding how to get the input:
      -have user paste them in certain format in text field
      -read from file, if possible with just JavaScript/jQuery
    -ideas regarding the input itself:
      -perhaps have it be specified there what is being graphed
      -get the maxes from the inputs
  -graph/input warnings/errors
    -if any calculation's integration goes past the final data point
    of the graph whose final data point's x-coordinate is lowest,
    then the graphs don't interact, and this should be said
    -report error if no semi-colon where expected one
  -read "what is graphed" from file
-use AngularJS to note errorneous text field inputs
  -e.g. price floor or ceiling has to matter
-(if not done yet) clean up script.js
-mention the format of the input strings in readme
-when hover over some measurement (e.g. producer surplus), hi lite
(on a separate canvas in the stack) the regarded region
-have workarounds for calculations that reach the boundaries of the
supply or demand points

Considerable:
-look into AJAX, just in case it can help somehow
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-can probably afford to lower number of Riemann rectangles
-option to save applied inputs and apply them later
  -could use MongoDB and Node.js for this
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-limit each text field's size?
  -or would this require too much assuming about the data?
-when change is made, hi lite the fields that changed, and have
a button to clear the hi lites
-replace "data" variable name with "economyModel"
-reapply settings when apply-able (e.g. if user opens economy, apply
the last used world price)