Next:
-indicate to the user where calculations occur; ideas on how:
  -to say end; ideas:
    -say somewhere that the first point of intersection is used as
    the equilibrium point
    -emphasize first equilibrium point with big dot
    -emphasize 1st equilibrium with dashed line
-see the section below about inputs that change S or D; plan ahead
-remaining calculations:
  -open, private economy
  -closed, public economy
  -open, public economy
-graph/input warnings/errors
  -if any calculation's integration goes past the final data point
  of the graph whose final data point's x-coordinate is lowest,
  then the graphs don't interact, and this should be said
-regarding inputs that change S or D
  -if D or S is changed (besides by the addition of a point),
  keep the original D and S, and somehow indicate
  the new D or new S
  -change total revenue to use quantity demanded, not just equilibrium
  quantity
-pick a way to get user's input to make the graph;
  -ideas regarding how to get the input:
    -have user paste them in certain format in text field
    -read from file, if possible with just JavaScript/jQuery
  -ideas regarding the input itself:
    -perhaps have it be specified there what is being graphed
    -get the maxes from the inputs
  -ideas regarding input-checking:
    -report error if no semi-colon where expected one

Eventually:
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-use AngularJS to note errorneous text field inputs
  -e.g .price floor or ceiling has to matter
-option to hi-lite deadweight loss (and maybe even each surplus) on graph
-look into AJAX, just in case it can help somehow
-think of where can apply CSS, filters, and other features from AngularJS
tutorial I forgot about
-have "enumerators" for number of "ticks" (i.e. precision?)
  -e.g. thousandths, hundredths

Considerable:
-when hover over some measurement (e.g. producer surplus), hi lite
(on a separate canvas in the stack) the regarded region
-can probably afford to lower number of Riemann rectangles
-option to save applied inputs and apply them later
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-see if is way to keep data in elements removed by ng-if
  -could use JavaScript/jQuery and, when ng-if creates an element,
  somehow react to the change to give the appropriate input fields
  their former values