DON'T FORGET UNIT TESTS AND MULTIPLE BRANCHES

Next:
-Graph custom type
  -draw demand and supply
  -clean up script.js
  -see if can scale the context vertically to flip it
  -see if can apply the offsets to the canvas itself
-applying and improving Graph type
  -probably use multiple stack canvases (e.g. one for the axes, one
  for supply, one for demand, to make it easier to change what's graphed)
  -labelled axes?
  -can do appropriate calculations (see below stuff)
-graph warnings/errors
  -if aren't two graphs, say so
  -if any calculation's integration goes past the final data point
  of the graph whose final data point's x-coordinate is lowest,
  then the graphs don't interact, and this should be said
-calculations:
  -integration should start at the first given point (rounded up to the next
  tick), not at zero
    -use the first given point of the graph that starts later
    -thus, I should probably always hi lite the regions (and use a legend)
      -or could have dashed line as left boundary (and maybe at
      equilibrium)
  -say somewhere that the first point of intersection is used as
  the equilibrium point
-special inputs
  -if D or S is changed (besides by the addition of a point),
  keep the original D and S, and somehow indicate
  the new D or new S
-pick a way to get user's input to make the graph;
  -ideas regarding how to get the input:
    -have user paste them in certain format in text field
    -read from file, if possible with just JavaScript/jQuery
  -ideas regarding the input itself:
    -perhaps have it be specified there what is being graphed
  -ideas regarding input-checking:
    -report error if no semi-colon where expected one

Eventually:
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-use AngularJS to note errorneous text field inputs
  -e.g .price floor or ceiling has to matter
-option to hi-lite deadweight loss (and maybe even each surplus) on graph
-look into AJAX, just in case it can help somehow
-think of where can apply CSS, filters, and other features from AngularJS
tutorial I forgot about
-have "enumerators" for number of "ticks" (i.e. precision?)
  -e.g. thousandths, hundredths

Considerable:
-can probably afford to lower number of Riemann rectangles
-option to save applied inputs and apply them later
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-see if is way to keep data in elements removed by ng-if
  -could use JavaScript/jQuery and, when ng-if creates an element,
  somehow react to the change to give the appropriate input fields
  their former values