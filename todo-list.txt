DON'T FORGET UNIT TESTS AND MULTIPLE BRANCHES

Next:
-make graph by asking for points from the user and making
a line graph out of them
  -have a button "Add Point", and if that button
  is clicked, while the user hovers over the graph, the coordinates
  are displayed somewhere
  -could temporarily use slopes of graphs, but make sure allowing
  the user to graph the points doesn't become impossible
-graph supply and demand
  -use ng-change to check of way to decide how to orient the graphs is
  being changed (so can redraw the graph)
  -if D or S is changed, keep the original D and S, and somehow indicate
  the new D or new S

Eventually:
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-use AngularJS to note errorneous text field inputs
  -e.g .price floor or ceiling has to matter
-option to hi-lite deadweight loss (and maybe even each surplus) on graph
-decide which Riemann sum to use (probably either midpoint or trapezoidal)
-look into AJAX, just in case it can help somehow
-think of where can apply CSS, filters, and other features from AngularJS
tutorial I forgot about
-have "enumerators" for number of "ticks" (i.e. precision?)
  -e.g. thousandths, hundredths

Considerable:
-option to save applied inputs and apply them later
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-see if is way to keep data in elements removed by ng-if
  -could use JavaScript/jQuery and, when ng-if creates an element,
  somehow react to the change to give the appropriate input fields
  their former values