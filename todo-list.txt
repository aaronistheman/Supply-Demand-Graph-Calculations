Contents:
-Next
-Note #1
-Eventually
-Considerable

Next:
-restructure project:
  -model type
    -test fixing
      -restructure PiecewiseFunction to use the new Point type while
      still passing its tests
        -change name of getY()
        -restructure tests
        -resturcture methods
    -implement methods
  -other
    -remove uses of Math.round(), except in graph.js
    -replace "new" fixing with error
  -view type
    -constructor that stores the canvases
    -have some context wrapper custom type so I don't have to keep
    putting the width and height in
    -a method for each possible canvas edit
    -update()
  -controller type
    -sets up event handlers
      -if valid input
        -each calls model.update() with appropriate parameters
        -each probably calls view.update()
      -else
        -alert
  -finish restructuring tests
  -remove Graph custom type and usage of it
  -make sure everything is put in correct folder
    -adjust tests if needed
  -describe the use of MVC in the readme

Note #1:
-remaining calculations/actions:
  -open, private economy (again)
    -I forgot that I need to change welfare
  -closed, public economy
    -(excise) tax or subsidy on supply:
      -location of "active supply"
        -somehow indicate the new D or new S; ideas on how:
          -different colors
        -make sure total revenue uses quantity demanded
      -recalculate:
        -equilibrium
        -total revenue
        -welfare
      -calculate
        -tax revenue
        -deadweight loss
    -(sales?) tax or subsidy on demand:
      -location of "active demand"
      -recalculate:
        -equilibrium
        -welfare
      -calculate
        -tax revenue
        -deadweight loss
    -price mechanism:
      -dashed line for where mechanism is
      -floor or ceiling:
        -recalculate (if equilibrium isn't reached):
          -mark that equilibrium isn't reached
          -total revenue
          -welfare
        -calculate
          -deadweight loss
  -open, public economy
    -tariff
      -recalculate:
        -welfare
      -calculate:
        -deadweight loss (in an unexpected area)
        -number of imports
        -tariff revenue
    -import quota
      -recalculate:
        -welfare
      -calculate:
        -deadweight loss (in an unexpected area)
        -number of imports (given)
        -tariff revenue N/A

Eventually:
-graph input
  -pick a way to get user's input to make the graph;
    -ideas regarding how to get the input:
      -have user paste them in certain format in text field
      -read from file, if possible with just JavaScript/jQuery
    -ideas regarding the input itself:
      -perhaps have it be specified there what is being graphed
      -get the maxes from the inputs
  -graph/input warnings/errors
    -if any calculation's integration goes past the final data point
    of the graph whose final data point's x-coordinate is lowest,
    then the graphs don't interact, and this should be said
    -report error if no semi-colon where expected one
    -if world price causes a quantity to go beyond lowest or highest
-use AngularJS to note errorneous text field inputs
  -e.g. price floor or ceiling has to matter
-(if not done yet) clean up script.js
-mention the format of the input strings in readme
-when hover over some measurement (e.g. producer surplus), hi lite
(on a separate canvas in the stack) the regarded region
-have workarounds for calculations that reach the boundaries of the
supply or demand points

Considerable:
-look into AJAX, just in case it can help somehow
-allow graphing of firm or aggregate
  -could use AngularJS if possible
  -could change the fields shown (in response to what the user wants
  to graph) (perhaps with AJAX or PHP or ASP or something)
-can probably afford to lower number of Riemann rectangles
-option to save applied inputs and apply them later
-allow the panels to be in more than one column; see how it was done with
CSS in one of the card games
-using tables to more neatly present the calculated data
-see if is way to keep data in elements removed by ng-if
  -could use JavaScript/jQuery and, when ng-if creates an element,
  somehow react to the change to give the appropriate input fields
  their former values
-limit each text field's size
  -or would this require too much assuming about the data